How to rename a image/container?
agile vs waterfall and scrum?


=====
sudo yum -y update
sudo yum install -y docker
docker --version
sudo service docker start

sudo systemctl status docker
sudo usermod -aG docker ${USER}

BASIC:
docker info
docker -v
docker ps -a
docker images
docker --help
docker login

IMAGES:
docker images or docker image ls
docker pull
docker rmi imageid  

Containers:
docker ps
docker run
docker start container id/name
docker stop container id/name

System:
docker stats
docker system df
docker system prune


docker run -it ubuntu



app.js
console.log("Hello");

Dockerfile
From node:alpine
COPY ./DESKTOP
WORKDIR /DESKTOP
CMD node app.js

docker build -t docker .


[ec2-user@ip-172-31-5-41 ~]$ export PS1="\u$"
ec2-user$



docker images -f "dangling=false" -----will list images which are not running(false means)
docker images -q ------- only images ids


docker start containerid/name
docker stop containerid/name

docker pause containerid/name
docker unpause containerid/name

docker stats containerid/name
docker attach container id-------once u run a container, then this will work as it gets u connected


docker kill containerid/name
docker rm containerid/name

/Users/Payal Mohapatra/Desktop


docker pull ubuntu docker pull ubuntu:18.04 ----pulling a particular version


Dockerfile : 
A text file with instructions to build image
Automation of Docker Image Creation

FROM
RUN
CMD

Step 1 : Create a file named Dockerfile
Step 2 : Add instructions in Dockerfile
Step 3 : Build dockerfile to create image
Step 4 : Run image to create container

COMMANDS
: docker build 
: docker build -t ImageName:Tag directoryOfDocekrfile
: docker run image

 docker build -t myomage .
docker build [OPTIONS] PATH | URL | -



Docker compose
: tool for defining & running multi-container docker applications
: use yaml files to configure application services (docker-compose.yml)
: can start all services with a single command : docker compose up
: can stop all services with a single command : docker compose down
: can scale up selected services when required

Step 1 : install docker compose
   (already installed on windows and mac with docker)
   docker-compose -v
   
   2 Ways

   1.  https://github.com/docker/compose/rel...

   2. Using PIP
    pip install -U docker-compose

Step 2 : Create docker compose file at any location on your system
   docker-compose.yml

Step 3 : Check the validity of file by command
    docker-compose config

Step 4 : Run docker-compose.yml file by command
   docker-compose up -d

Steps 5 : Bring down application by command
   docker-compose down


=======
Volumes are the preferred mechanism for persisting data generated by and used by Docker containers

: docker volume  //get information
: docker volume create
: docker volume ls
: docker volume inspect
: docker volume rm
: docker volume prune

Instead of deleting containers one by one of docker ps -a , we can use docker container prune.  and for docker ps (running containers) we can use  docker rm $(ps -aq)

Use of Volumes
===========
Decoupling container from storage
Share volume (storage/data) among different containers
Attach volume to container
On deleting container volume does not delete

Commands
docker run --name MyJenkins1 -v myvol1:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins
docker run --name MyJenkins2 -v myvol1:/var/jenkins_home -p 9090:8080 -p 60000:50000 jenkins
docker run --name MyJenkins3 -v /Users/raghav/Desktop/Jenkins_Home:/var/jenkins_home -p 9191:8080 -p 40000:50000 jenkins





What is Docker?
Docker is a software platform that allows you to build, test, and deploy applications quickly.
Docker packages software into standardized units called containers that have everything the software needs to run including libraries, system tools, code, and runtime

How Docker works?
Docker is the example of a containerization platform.


Difference between Virtualization & Containerization
When code is developed in a specific computing environment and transferred to a different environment, 
there is a high possibility of the code to result in bugs and errors due to missing dependencies, libraries, or any configuration setting files.

Explain Docker Architecture
Advantages of using Docker
What are Docker Images
What are Docker Containers
What is Dockerfile
What is Docker Compose






docker -p (port main host:docker)  -e (environment variable)
docker -v -----version

docker run image_name----- if image is not available then it will download and run it from docker hub
docker ps ------show  only running
docker ps -a ---- show all
docker start containerid/name-----
docker stop containerid/name-----
docker rm container_name---- remove container
docker rmi image_name-----remove image
docker run -d image_name----- it will run and gives you the prompt
docker run -d image_name sleep 100------ it will run 1st and sleep for 100 seconfds
docker top containerid/name------Shows all running processes in an existing container
docker exec -it <container id> bash -----This command is used to access the running container
docker kill(kill -9) vs stop(gracefullly kill)


docker images-----shows list of images
docker build -t imagename/tag------Builds and tags an image for easier tracking
docker image rm image----- Removes an image
docker system prune -----Removes all stopped containers, all networks not used by containers, all dangling images, and all build cache
docker image prune -a ----- Clears all images that are not being used by containers
docker image prune---------Clears an unused image
docker rmi $(docker images -aq)----removing all images

docker pull nginx:1.14-alpine-------pulling from registry/hub with version as 1.14
docker run -d --name webapp nginx:1.14-alpine---running ngnix and naming it as webapp
docker run -p 38282:8080 kodekloud/simple-webapp:blue -------(host/outside port:container/inside port) and blue is tag
docker run -p 38282:8080 --name blue-app -e APP_COLOR=blue -d kodekloud/simple-webapp
docker run -d -e MYSQL_ROOT_PASSWORD=db_pass123 --name mysql-db mysql

docker exec -ti container script.sh-----Runs a command in a container and i is interactive mode
docker exec -it container_id ps -ef ---- to know process running in that particular container
docker exec -it container_id ps -ef ---- to know process running in that particular container
docker attach container--------attaches to a container
docker logs container
docker history image



docker login -------Logs in to a registry
docker pull mysql
docker push repo/ rhel-httpd:latest------
docker network ls---- shows all n/ws
docker network connect networkname container---- Connects a container to a network
docker network rm n/wnanem
docker network inspect network_name
docker network create my_new
docker run --name alpine-2 --network=none alpine----atched to n/w none

